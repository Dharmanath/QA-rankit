import numpy as np
import pandas as pd

DEFAULT_AP = 0 # if the question has no answer in the candidates
DEFAULT_RR = 0

def AP(arr, default_ap=DEFAULT_AP):
    '''
    Average Precision, for one question
    arr is a Series of {0, 1}
    '''
    n = len(arr)
    csum, num_ans = arr.cumsum(), arr.sum()
    pos = np.arange(1, n + 1).astype(float)
    res = default_ap if num_ans == 0 else ((csum / pos * arr).sum() / num_ans)
    return res

'''
Reciprocal Rank, for one question
arr is a Series of {0, 1}
'''
RR = lambda arr, default_rr=DEFAULT_RR : default_rr if arr.sum() == 0 else 1. / (list(arr).index(1) + 1)

# grp is a SeriesGroupBy object, generated by code like
# grp = features_trn.Label.groupby(features_trn.QuestionID)
MAP = lambda grp, keep_no_ans=True : grp.agg(AP).mean() if keep_no_ans else np.nanmean(grp.agg(lambda arr : AP(arr, np.nan)))
MRR = lambda grp, keep_no_ans=True : grp.agg(RR).mean() if keep_no_ans else np.nanmean(grp.agg(lambda arr : RR(arr, np.nan)))
# MAP = lambda grp, keep_no_ans=True : grp.agg(AP).mean() if keep_no_ans else np.nanmean(grp.agg(AP, np.nan)) # also works
# MRR = lambda grp, keep_no_ans=True : grp.agg(RR).mean() if keep_no_ans else np.nanmean(grp.agg(RR, np.nan)) # also works

count_num_cooccur = lambda x, y : len(set(x) & set(y))
